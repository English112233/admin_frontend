'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {

    beforeToday: function beforeToday(days) {
        var timestamp = new Date().getTime() - 86400000 * days;
        return new Date(timestamp);
    },

    beforeMonth: function beforeMonth(months) {
        var date = new Date();
        var currentMonth = date.getMonth();
        if (currentMonth < 1) {
            var year = date.getFullYear() - 1;
            date.setMonth(11, 1);
            date.setFullYear(year);
        } else {
            date.setMonth(currentMonth - 1, 1);
        }
        return date;
    },

    now: function now(format) {
        format = format || 'Y-m-d H:i:s';
        return this.format(format, new Date().getTime() / 1000);
    },

    beginOfDate: function beginOfDate(date) {
        date = date || new Date();
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        return date;
    },

    endOfDate: function endOfDate(date) {
        date = date || new Date();
        date.setHours(23);
        date.setMinutes(59);
        date.setSeconds(59);
        return date;
    },

    beginOfMonth: function beginOfMonth(date) {
        date = date || new Date();
        date.setDate(1);
        return this.beginOfDate(date);
    },

    endOfMonth: function endOfMonth(date) {
        date = date || new Date();
        var month = date.getMonth() + 1;
        if (month === 2) {
            if (this.isLeapYear(date.getFullYear())) {
                date.setDate(29);
            } else {
                date.setDate(28);
            }
            return this.endOfDate(date);
        }
        var bigMonths = [1, 3, 5, 7, 8, 10, 12];
        for (var i = 0, len = bigMonths.length; i < len; i++) {
            if (bigMonths[i] === month) {
                date.setDate(31);
                return this.endOfDate(date);
            }
        }
        date.setDate(30);
        return this.endOfDate(date);
    },
    beginOfMonthF: function beginOfMonthF(date, format) {
        format = format || 'Y-m-d H:i:s';
        return this.format(format, this.beginOfMonth(date).getTime() / 1000);
    },

    endOfMonthF: function endOfMonthF(date, format) {
        format = format || 'Y-m-d H:i:s';
        return this.format(format, this.endOfMonth(date).getTime() / 1000);
    },
    beginOfDateF: function beginOfDateF(date, format) {
        date = date || new Date();
        format = format || 'Y-m-d H:i:s';
        return this.format(format, this.beginOfDate(date).getTime() / 1000);
    },

    endOfDateF: function endOfDateF(date, format) {
        date = date || new Date();
        format = format || 'Y-m-d H:i:s';
        return this.format(format, this.endOfDate(date).getTime() / 1000);
    },

    isLeapYear: function isLeapYear(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    },
    format: function format(_format, timestamp) {

        var that = this;
        var jsdate = void 0,
            f = void 0;
        // Keep this here (works, but for code commented-out below for file size reasons)
        // let tal= [];
        var txt_words = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        var formatChr = /\\?(.?)/gi;
        var formatChrCb = function formatChrCb(t, s) {
            return f[t] ? f[t]() : s;
        };
        var _pad = function _pad(n, c) {
            n = String(n);
            while (n.length < c) {
                n = '0' + n;
            }
            return n;
        };
        f = {
            // Day
            d: function d() {
                // Day of month w/leading 0; 01..31
                return _pad(f.j(), 2);
            },
            D: function D() {
                // Shorthand day name; Mon...Sun
                return f.l().slice(0, 3);
            },
            j: function j() {
                // Day of month; 1..31
                return jsdate.getDate();
            },
            l: function l() {
                // Full day name; Monday...Sunday
                return txt_words[f.w()] + 'day';
            },
            N: function N() {
                // ISO-8601 day of week; 1[Mon]..7[Sun]
                return f.w() || 7;
            },
            S: function S() {
                // Ordinal suffix for day of month; st, nd, rd, th
                var j = f.j();
                var i = j % 10;
                if (i <= 3 && parseInt(j % 100 / 10, 10) == 1) {
                    i = 0;
                }
                return ['st', 'nd', 'rd'][i - 1] || 'th';
            },
            w: function w() {
                // Day of week; 0[Sun]..6[Sat]
                return jsdate.getDay();
            },
            z: function z() {
                // Day of year; 0..365
                var a = new Date(f.Y(), f.n() - 1, f.j());
                var b = new Date(f.Y(), 0, 1);
                return Math.round((a - b) / 864e5);
            },

            // Week
            W: function W() {
                // ISO-8601 week number
                var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);
                var b = new Date(a.getFullYear(), 0, 4);
                return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);
            },

            // Month
            F: function F() {
                // Full month name; January...December
                return txt_words[6 + f.n()];
            },
            m: function m() {
                // Month w/leading 0; 01...12
                return _pad(f.n(), 2);
            },
            M: function M() {
                // Shorthand month name; Jan...Dec
                return f.F().slice(0, 3);
            },
            n: function n() {
                // Month; 1...12
                return jsdate.getMonth() + 1;
            },
            t: function t() {
                // Days in month; 28...31
                return new Date(f.Y(), f.n(), 0).getDate();
            },

            // Year
            L: function L() {
                // Is leap year?; 0 or 1
                var j = f.Y();
                return j % 4 === 0 & j % 100 !== 0 | j % 400 === 0;
            },
            o: function o() {
                // ISO-8601 year
                var n = f.n();
                var W = f.W();
                var Y = f.Y();
                return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);
            },
            Y: function Y() {
                // Full year; e.g. 1980...2010
                return jsdate.getFullYear();
            },
            y: function y() {
                // Last two digits of year; 00...99
                return f.Y().toString().slice(-2);
            },

            // Time
            a: function a() {
                // am or pm
                return jsdate.getHours() > 11 ? 'pm' : 'am';
            },
            A: function A() {
                // AM or PM
                return f.a().toUpperCase();
            },
            B: function B() {
                // Swatch Internet time; 000..999
                var H = jsdate.getUTCHours() * 36e2;
                // Hours
                var i = jsdate.getUTCMinutes() * 60;
                // Minutes
                // Seconds
                var s = jsdate.getUTCSeconds();
                return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);
            },
            g: function g() {
                // 12-Hours; 1..12
                return f.G() % 12 || 12;
            },
            G: function G() {
                // 24-Hours; 0..23
                return jsdate.getHours();
            },
            h: function h() {
                // 12-Hours w/leading 0; 01..12
                return _pad(f.g(), 2);
            },
            H: function H() {
                // 24-Hours w/leading 0; 00..23
                return _pad(f.G(), 2);
            },
            i: function i() {
                // Minutes w/leading 0; 00..59
                return _pad(jsdate.getMinutes(), 2);
            },
            s: function s() {
                // Seconds w/leading 0; 00..59
                return _pad(jsdate.getSeconds(), 2);
            },
            u: function u() {
                // Microseconds; 000000-999000
                return _pad(jsdate.getMilliseconds() * 1000, 6);
            },

            // Timezone
            e: function e() {
                // Timezone identifier; e.g. Atlantic/Azores, ...
                // The following works, but requires inclusion of the very large
                // timezone_abbreviations_list() function.
                /*              return that.date_default_timezone_get();
                 */
                throw 'Not supported (see source code of date() for timezone on how to add support)';
            },
            I: function I() {
                // DST observed?; 0 or 1
                // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.
                // If they are not equal, then DST is observed.
                var a = new Date(f.Y(), 0);
                // Jan 1
                var c = Date.UTC(f.Y(), 0);
                // Jan 1 UTC
                var b = new Date(f.Y(), 6);
                // Jul 1
                // Jul 1 UTC
                var d = Date.UTC(f.Y(), 6);
                return a - c !== b - d ? 1 : 0;
            },
            O: function O() {
                // Difference to GMT in hour format; e.g. +0200
                var tzo = jsdate.getTimezoneOffset();
                var a = Math.abs(tzo);
                return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4);
            },
            P: function P() {
                // Difference to GMT w/colon; e.g. +02:00
                var O = f.O();
                return O.substr(0, 3) + ':' + O.substr(3, 2);
            },
            T: function T() {
                // Timezone abbreviation; e.g. EST, MDT, ...
                // The following works, but requires inclusion of the very
                // large timezone_abbreviations_list() function.
                /*              let abbr, i, os, _default;
                 if (!tal.length) {
                 tal = that.timezone_abbreviations_list();
                 }
                 if (that.php_js && that.php_js.default_timezone) {
                 _default = that.php_js.default_timezone;
                 for (abbr in tal) {
                 for (i = 0; i < tal[abbr].length; i++) {
                 if (tal[abbr][i].timezone_id === _default) {
                 return abbr.toUpperCase();
                 }
                 }
                 }
                 }
                 for (abbr in tal) {
                 for (i = 0; i < tal[abbr].length; i++) {
                 os = -jsdate.getTimezoneOffset() * 60;
                 if (tal[abbr][i].offset === os) {
                 return abbr.toUpperCase();
                 }
                 }
                 }
                 */
                return 'UTC';
            },
            Z: function Z() {
                // Timezone offset in seconds (-43200...50400)
                return -jsdate.getTimezoneOffset() * 60;
            },

            // Full Date/Time
            c: function c() {
                // ISO-8601 date.
                return 'Y-m-d\\TH:i:sP'.replace(formatChr, formatChrCb);
            },
            r: function r() {
                // RFC 2822
                return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);
            },
            U: function U() {
                // Seconds since UNIX epoch
                return jsdate / 1000 | 0;
            }
        };
        this.date = function (format, timestamp) {
            that = this;
            jsdate = timestamp === undefined ? new Date() : // Not provided
            timestamp instanceof Date ? new Date(timestamp) : // JS Date()
            new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)
            ;
            return format.replace(formatChr, formatChrCb);
        };
        return this.date(_format, timestamp);
    }
};