'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _bluesdkLogger = require('bluesdk-logger');

var _bluesdkLogger2 = _interopRequireDefault(_bluesdkLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Validator(config) {
    var self = this;
    self.errorMsg = {
        'required': '请输入:attribute',
        'email': '电子邮件地址格式错误',
        'same': ':attribute和:other必须一致',
        'notSame': ':attribute和:other不能相同',
        'length': ':attribute 长度错误 (应为 :length 个字符)',
        'minLength': ':attribute 太短 (最小值为 :min 个字符)',
        'maxLength': ':attribute 太长 (最大值为 :max 个字符)',
        'lengthBetween': ':attribute的长度必须介于:min和:max之间',
        'numeric': ':attribute必须是数字',
        'integer': ':attribute必须是整数',
        'minNumeric': ':attribute不能小于:min',
        'maxNumeric': ':attribute不能大于:max',
        'numericBetween': ':attribute的值必须介于:min和:max之间',
        'match': ':attribute跟指定的格式不匹配',
        'cellphone': '手机号格式错误',
        'url': ':attribute不是有效的URL地址',
        'domain': '域名格式错误',
        'checked': ':attribute必须选中',
        'qq': 'QQ号格式错误',
        'idCardNo': '身份证号码不正确',
        'bankCardNo': '银行卡号格式错误',
        'noSpacing': ':attribute不能包含空格',
        'decimal': '小数点最多保留:length位',
        'greaterThan': ':attribute必须大于:num',
        'lessThan': ':attribute必须小于:num',
        'phone': ':attribute不是有效的电话号码格式',
        'bankCardNo2': '对公账户格式错误',
        'password': '密码强度太低，不能是纯数字或字母',
        'chinese': ':attribute必须是中文',
        'noChinese': ':attribute不能输入中文',
        'exclude': ':attribute不能包含:exclude'
    };
    //自定义的错误描述
    self.customErrorMsg = config['customErrorMsg'] || {};
    //验证规则
    self.rules = config['rules'] || {};
    self.labels = config['labels'] || {};
    self.enableBlur = config['blur'] || false;
    self.enableChange = config['change'] || false;
    self.enableFocus = config['focus'] || false;
    self.blockMode = config['blockMode'] || false; //阻塞模式，有一个字段发生错误，后面的验证就不继续了
    self.customValidator = config['customValidator'] || {};
    self.scenario = config['scenario'] || null; //string or function
    self.debug = config['debug'] || false;
    self.labelSource = config['labelSource'] || 'placeholder'; //默认取input元素的 placeholder || label

    //传参结束
    self.errors = {};
    self.fieldValidators = {};
    self.inputCache = {};

    self.log = new _bluesdkLogger2.default(self.debug);

    //字段验证结果
    self.validateResult = {};

    self.init = function () {
        self.resolveRule();
        self.resolveCusValidator();
        if (self.enableBlur) {
            self.bindBlur();
        }
        if (self.enableChange) {
            self.bindChange();
        }
    };

    //处理传入的 rule 参数
    self.resolveRule = function () {
        for (var name in self.rules) {
            if (!self.rules.hasOwnProperty(name)) continue;
            var el = config['form'].find(':input[name="' + self.getInputName(name) + '"]');
            if (el.length === 0) {
                //input元素不存在
                self.log.warn('找不到' + name);
                continue;
            }
            self.inputCache[name] = { 'type': el.attr('type'), 'el': el };
            self.fieldValidators[name] = [];
            if (_typeof(self.rules[name]) === 'object') {
                for (var scenario in self.rules[name]) {
                    if (self.rules[name].hasOwnProperty(scenario)) {
                        self.addRules(name, self.rules[name][scenario], scenario);
                    }
                }
            } else {
                self.addRules(name, self.rules[name], '');
            }
        }
    };

    //处理传入的自定义验证器
    self.resolveCusValidator = function () {
        for (var validationName in self.customValidator) {
            if (self.customValidator.hasOwnProperty(validationName)) {
                self.innerValidators[validationName] = self.customValidator[validationName];
            }
        }
    };

    self.bindBlur = function () {
        var _loop = function _loop(name) {
            if (!self.rules.hasOwnProperty(name)) return 'continue';
            (function () {
                var inputName = name;
                var input = self.getInputCache(inputName);
                if (!input || !input.el || input.el.length === 0) return;
                input.el.blur(function () {
                    //为什么只能引用inputName而不能引用name,作用域问题
                    self.validate(inputName, 'blur');
                });
            })();
        };

        for (var name in self.rules) {
            var _ret = _loop(name);

            if (_ret === 'continue') continue;
        }
    };

    self.bindChange = function () {
        var _loop2 = function _loop2(name) {
            if (!self.rules.hasOwnProperty(name)) return 'continue';
            (function () {
                var inputName = name;
                var input = self.getInputCache(inputName);
                if (!input || !input.el || input.el.length === 0) return;
                if (input.type === 'select' || input.type === 'checkbox' || input.type === 'radio') {
                    input['el'].change(function () {
                        self.validate(inputName, 'change');
                    });
                } else {
                    input['el'][0].oninput = function () {
                        self.validate(inputName, 'change');
                    };
                }
            })();
        };

        for (var name in self.rules) {
            var _ret2 = _loop2(name);

            if (_ret2 === 'continue') continue;
        }
    };

    /**
     * 添加验证规则
     * @param name 字段名称
     * @param rule example 'required|length:4'
     * @param scenario 场景
     */
    self.addRules = function (name, rule, scenario) {
        var validators = rule.split('|');
        for (var i = 0, len = validators.length; i < len; i++) {
            rule = validators[i].split(':');
            var params = rule.length === 1 ? null : rule[1];
            self.fieldValidators[name].push({ 'validatorName': rule[0], 'params': params, 'scenario': scenario });
        }
    };

    /**
     * 获取input标签的name属性
     */
    self.getInputName = function (name) {
        return name;
    };

    self.getInputCache = function (name) {
        if (!self.inputCache.hasOwnProperty(name)) {
            var el = config['form'].find(':input[name="' + self.getInputName(name) + '"]');
            if (el.length === 0) {
                //input元素不存在
                self.log.error(name + '不存在');
                return null;
            } else {
                self.inputCache[name] = { 'type': el.attr('type'), 'el': el };
            }
        }
        return self.inputCache[name];
    };

    self.getEl = function (name) {
        var input = self.getInputCache(name);
        return input ? input['el'] : null;
    };

    self.getLabel = function (name) {
        if (self.labels[name]) {
            return self.labels[name];
        }
        var label = name;
        if (self.getEl(name) !== null) {
            if (self.labelSource === 'placeholder') {
                label = self.getEl(name).attr('placeholder') || name;
            } else if (self.labelSource === 'label') {
                (0, _jquery2.default)('label').each(function () {
                    var e = (0, _jquery2.default)(this);
                    if (e.attr('for') === name) {
                        label = e.text();
                    }
                });
            }
        }
        self.labels[name] = label;
        return label;
    };

    /**
     *
     * @param name
     * @returns {*}
     */
    self.getValue = function (name) {
        var input = self.getInputCache(name);
        if (!input) return null;
        var value = void 0;
        if (input['type'] === 'radio' || input['type'] === 'checkbox') {
            value = [];
            input['el'].filter(':checked').each(function () {
                value.push((0, _jquery2.default)(this).val());
            });
            return value;
        } else {
            return input['el'].val();
        }
    };

    self.addError = function (event) {
        self.errors[event['name']] = event['errorMsg'];
        self.onError(event);
        if (event['eventType'] === 'submit' && self.enableFocus) {
            var e = (0, _jquery2.default)('input:focus');
            if (!e || !e.length || e.attr('type') === 'submit') {
                var el = self.getEl(event['name']);
                if (el !== null) {
                    el.focus();
                }
            }
        }
        return false;
    };

    self.hasError = function (name) {
        if (!name) {
            for (var i in self.errors) {
                if (self.errors.hasOwnProperty(i)) return true;
            }
            return false;
        }
        return self.errors[name] !== undefined;
    };

    self.removeError = function (name) {
        delete self.errors[name];
        delete self.validateResult[name];
    };

    self.getError = function (name) {
        return self.errors[name];
    };

    self.run = function () {
        var result = true;
        for (var name in self.fieldValidators) {
            if (!self.fieldValidators.hasOwnProperty(name)) continue;
            if (!self.validate(name, 'submit')) result = false;
            if (self.blockMode && !result) break;
        }
        return result;
    };

    self.isScenario = function (scenario) {
        if (!scenario || !self.scenario) return true;
        if (typeof self.scenario === 'function') {
            return self.scenario() === scenario;
        }
        return self.scenario === scenario;
    };

    self.errorEvent = function (c) {
        var el = self.getInputCache(c.name);
        return {
            'data': self.getValue(c.name),
            'label': self.getLabel(c.name),
            'type': el ? el['type'] : null,
            'eventType': c.eventType || 'submit',
            'errorMsg': c.errorMsg,
            'name': c.name,
            'validator': self
        };
    };

    /**
     * 对元素进行验证
     * @param name 字段名称
     * @param eventType 类型blur || submit
     * @returns {boolean}
     */
    self.validate = function (name, eventType) {
        //先移除错误
        self.removeError(name);
        //定义验证事件参数
        var event = self.errorEvent({ name: name, eventType: eventType });
        //默认通过验证，scenario情况下可能有字段没有验证规则
        self.validateResult[name] = true;
        for (var i = 0, len = self.fieldValidators[name].length; i < len; i++) {
            var rule = self.fieldValidators[name][i];
            if (!self.isScenario(rule['scenario'])) {
                //场景不对应，则不进行验证
                continue;
            }
            event['params'] = rule['params'];
            event['errorMsg'] = self.getErrorMsg(name, rule['validatorName']);
            if (!self.innerValidators.hasOwnProperty(rule['validatorName'])) {
                self.log.error('找不到验证器:' + rule['validatorName']);
                continue;
            }
            self.validateResult[name] = self.innerValidators[rule['validatorName']](event);
            if (!self.validateResult[name]) {
                break;
            }
        }
        if (self.validateResult[name]) {
            self.onSuccess(event);
        }
        self.afterValidate(self.isPass());
        return self.validateResult[name];
    };

    self.getErrorMsg = function (name, type) {
        var error = '';
        if (self.customErrorMsg[name] && self.customErrorMsg[name][type]) {
            if (typeof self.customErrorMsg[name][type] === 'function') {
                error = self.customErrorMsg[name][type]();
            } else {
                error = self.customErrorMsg[name][type];
            }
        } else if (self.errorMsg[type]) {
            error = self.errorMsg[type];
        }
        return error.replace(/:attribute/, self.getLabel(name));
    };

    //内置的验证器
    self.innerValidators = {
        'required': function required(event) {
            if (_typeof(event['data']) === 'object') {
                if (event['data'].length > 0) return true;
            } else {
                if (event['data'].trim('') !== '') return true;
            }
            return self.addError(event);
        },
        'email': function email(event) {
            if (event['data'] === '' || event['data'].match(/^[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/)) return true;
            return self.addError(event);
        },
        'same': function same(event) {
            if (self.hasError(event['params'])) return true;
            if (event['data'] !== self.getValue(event['params'])) {
                event['errorMsg'] = event['errorMsg'].replace(/:other/, self.getLabel(event['params']));
                return self.addError(event);
            }
            return true;
        },
        'notSame': function notSame(event) {
            if (self.hasError(event['params'])) return true;
            if (event['data'] === self.getValue(event['params'])) {
                event['errorMsg'] = event['errorMsg'].replace(/:other/, self.getLabel(event['params']));
                return self.addError(event);
            }
            return true;
        },
        'length': function length(event) {
            if (event['data'] === '' || event['data'].length === parseInt(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:length/, event['params']);
            return self.addError(event);
        },
        'minLength': function minLength(event) {
            if (event['data'] === '' || event['data'].length >= parseInt(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:min/, event['params']);
            return self.addError(event);
        },
        'maxLength': function maxLength(event) {
            if (event['data'] === '' || event['data'].length <= parseInt(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:max/, event['params']);
            return self.addError(event);
        },
        'lengthBetween': function lengthBetween(event) {
            if (event['data'] === '') return true;
            var params = event['params'].split(',');
            if (event['data'].length >= params[0] && event['data'].length <= params[1]) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:min/, params[0]).replace(/:max/, params[1]);
            return self.addError(event);
        },
        'numeric': function numeric(event) {
            if (event['data'] === '') return true;
            if (event['data'].match(/^-?\d[\d.]*$/) !== null && event['data'][event['data'].length - 1] !== '.') return true;
            return self.addError(event);
        },
        'integer': function integer(event) {
            if (event['data'] === '' || event['data'].match(/^-?\d+$/)) return true;
            return self.addError(event);
        },
        'minNumeric': function minNumeric(event) {
            if (event['data'] === '' || parseFloat(event['data']) >= parseFloat(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:min/, event['params']);
            return self.addError(event);
        },
        'maxNumeric': function maxNumeric(event) {
            if (event['data'] === '' || parseFloat(event['data']) <= parseFloat(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:max/, event['params']);
            return self.addError(event);
        },
        'numericBetween': function numericBetween(event) {
            if (event['data'] === '') return true;
            event['data'] = parseFloat(event['data']);
            var params = event['params'].split(',');
            if (event['data'] >= parseFloat(params[0]) && event['data'] <= parseFloat(params[1])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:min/, params[0]).replace(/:max/, params[1]);
            return self.addError(event);
        },
        'match': function match(event) {
            if (event['data'] === '' || event['data'].match(eval(event['params']))) return true;
            return self.addError(event);
        },
        'cellphone': function cellphone(event) {
            if (event['data'] === '' || event['data'].match(/^1[34578]\d{9}$/)) return true;
            return self.addError(event);
        },
        'url': function url(event) {
            if (event['data'] === '' || event['data'].match(/^https?:\/\/.+/)) return true;
            return self.addError(event);
        },
        'domain': function domain(event) {
            if (event['data'] === '' || event['data'].match(/^[\w\-.]*[\w\-]+\.[\w]+$/) !== null && event['data'][0] !== '.') return true;
            return self.addError(event);
        },
        'checked': function checked(event) {
            if (self.getEl(event['name']).is(':checked')) return true;
            return self.addError(event);
        },
        'qq': function qq(event) {
            if (event['data'] === '' || event['data'].match(/^[1-9]\d{3,14}$/)) return true;
            return self.addError(event);
        },
        'idCardNo': function idCardNo(event) {
            if (event['data'] === '') return true;
            var str = event['data'].toString().toUpperCase();
            if (str.match(/^\d{17}[\dX]$/)) {
                str = str.split('');
                var y = parseInt(str[6] + str[7] + str[8] + str[9]);
                var m = parseInt(str[10] + str[11]);
                var d = parseInt(str[12] + str[13]);
                var now = new Date();
                var currentYear = now.getFullYear();
                var currentMonth = now.getMonth() + 1;
                var rightMonth = y === currentYear ? currentMonth : 12;
                if (m > 0 && m <= rightMonth && y > 1900 && y <= currentYear && d > 0 && d <= new Date(y, m, 0).getDate()) {
                    var s = 0;
                    var powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];
                    for (var i = 0; i <= 16; i++) {
                        s += str[i] * powers[i];
                    }
                    var mod = s % 11;
                    var _mod = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
                    if (str[17] === _mod[mod]) {
                        return true;
                    }
                }
            }
            return self.addError(event);
        },
        'bankCardNo': function bankCardNo(event) {
            if (event['data'] === '' || event['data'].replace(/\s/g, '').match(/^[1-9]\d{13,19}$/)) return true;
            return self.addError(event);
        },
        'bankCardNo2': function bankCardNo2(event) {
            event['data'] = event['data'].replace(/\s/g, '');
            if (event['data'] === '' || event['data'].match(/^\d[\d\-]{6,40}\d$/)) return true;
            return self.addError(event);
        },
        'password': function password(event) {
            if (event['data'] === '' || !event['data'].match(/^(\d+|[a-zA-Z]+)$/)) return true;
            return self.addError(event);
        },
        'noSpacing': function noSpacing(event) {
            if (event['data'] === '' || event['data'].match(/^\S+$/)) return true;
            return self.addError(event);
        },
        'decimal': function decimal(event) {
            if (event['data'] === '' || event['data'].toString().replace(/^[^.]*/, '').length - 1 <= event['params']) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:length/, event['params']);
            return self.addError(event);
        },
        'greaterThan': function greaterThan(event) {
            if (event['data'] === '' || Number(event['data']) > Number(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:num/, event['params']);
            return self.addError(event);
        },
        'lessThan': function lessThan(event) {
            if (event['data'] === '' || Number(event['data']) < Number(event['params'])) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:num/, event['params']);
            return self.addError(event);
        },
        'phone': function phone(event) {
            if (event['data'] === '' || event['data'].match(/^\d[\d\-]+$/)) return true;
            return self.addError(event);
        },
        'chinese': function chinese(event) {
            if (event['data'] === '' || /^[\u4e00-\u9fa5·]+$/.test(event['data'])) return true;
            return self.addError(event);
        },
        'noChinese': function noChinese(event) {
            if (event['data'] === '' || /^[^\u4e00-\u9fa5]+$/.test(event['data'])) return true;
            return self.addError(event);
        },
        'exclude': function exclude(event) {
            if (event['data'] === '' || event['data'].search(new RegExp('[' + event['params'] + ']')) !== -1) return true;
            event['errorMsg'] = event['errorMsg'].replace(/:exclude/, event['params']);
            return self.addError(event);
        }
    };

    //是否全部字段都通过验证
    self.isPass = function () {
        var result = true;
        for (var name in self.fieldValidators) {
            if (!self.fieldValidators.hasOwnProperty(name)) continue;

            if (!self.validateResult[name]) {
                result = false;
                break;
            }
        }
        return result;
    };

    /**
     * 某字段 未通过验证规则时
     */
    self.onError = function (event) {};

    /**
     * 某字段 通过全部验证规则时
     */
    self.onSuccess = function (event) {};

    /**
     * 通过所有验证后回调
     */
    self.afterValidate = function (isPass) {};

    self.init();
}

exports.default = Validator;