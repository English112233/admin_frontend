'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluesdkDateUtil = require('bluesdk-date-util');

var _bluesdkDateUtil2 = _interopRequireDefault(_bluesdkDateUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var formatPlugin = {};
formatPlugin.install = function (Vue, options) {

    /**
     * 返回传入参数的最大值，支持传入任意个数
     */
    Vue.prototype.$maxNum = function () {
        var max = void 0;
        for (var i = 0; i < arguments.length; i++) {
            if (i === 0) {
                max = arguments[i];
            } else {
                max = max > arguments[i] ? max : arguments[i];
            }
        }
        return max;
    };

    Vue.prototype.$round = function (num, decimal) {
        return Number(num).toFixed(decimal);
    };

    /**
     * 数字转千分号
     */
    Vue.prototype.$numToPermillage = function (num, fraction, hideZero) {
        if (fraction === undefined) {
            fraction = 2;
        }
        var s = (num * 1000).toFixed(fraction).toString();
        if (hideZero && s.indexOf('.') > 0) {
            s = s.replace(/0+$/, '').replace(/\.$/, '');
        }
        return s + '‰';
    };

    /**
     * 数字转百分号
     */
    Vue.prototype.$numToPercent = function (num, fraction, hideZero) {
        if (fraction === undefined) {
            fraction = 2;
        }
        var s = (num * 100).toFixed(fraction).toString();
        if (hideZero && s.indexOf('.') > 0) {
            s = s.replace(/0+$/, '').replace(/\.$/, '');
        }
        return s + '%';
    };

    Vue.prototype.$timeToDate = function (timestamp, format) {
        if (!timestamp) {
            return '';
        }
        format = format || 'Y-m-d H:i:s';
        return _bluesdkDateUtil2.default.format(format, timestamp);
    };

    Vue.prototype.$mTimeToDate = function (timestamp, format) {
        if (!timestamp) {
            return '';
        }
        format = format || 'Y-m-d H:i:s';
        return _bluesdkDateUtil2.default.format(format, timestamp / 1000);
    };

    /**
     * 金额数字格式化（输入单元：分,输出单位：元）
     */
    Vue.prototype.$moneyFormat = function (cent) {
        if (cent === undefined) return '';
        var part = (cent / 100).toFixed(2).toString().split('.');
        var ret = part[0].replace(/\d+?(?=(?:\d{3})+$)/g, function (s) {
            return s + ',';
        });
        ret += '.' + part[1];
        return ret;
    };

    /**
     * 银行卡号格式化
     * card: 卡号，bit：分割位数，split：分割符号
     */
    Vue.prototype.$cardNoFormat = function (cardNo, bit, split) {
        bit = bit || 4;
        split = split || ' ';
        cardNo = String(cardNo);
        var re = RegExp('(\\d{' + bit + '})(?=\\d)', 'g');
        if (/^[A-Za-z0-9]*$/.test(cardNo)) {
            return cardNo.replace(re, '$1' + split);
        } else {
            return cardNo;
        }
    };

    /**
     * 数字转中文大写数字
     */
    Vue.prototype.$moneyToChinese = function (money) {
        var cnNums = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']; // 汉字的数字
        var cnIntRadice = ['', '拾', '佰', '仟']; // 基本单位
        var cnIntUnits = ['', '万', '亿', '兆']; // 对应整数部分扩展单位
        var cnDecUnits = ['角', '分', '毫', '厘']; // 对应小数部分单位
        // let cnInteger = '整'; //整数金额时后面跟的字符
        var cnIntLast = '元'; // 整型完以后的单位
        var maxNum = 999999999999999.9999; // 最大处理的数字

        var IntegerNum = void 0; // 金额整数部分
        var DecimalNum = void 0; // 金额小数部分
        var ChineseStr = ''; // 输出的中文金额字符串
        var parts = void 0; // 分离金额后用的数组，预定义
        if (money === '') {
            return '';
        }
        money = parseFloat(money);
        if (money >= maxNum) {
            return '';
        }
        if (money === 0) {
            // ChineseStr = cnNums[0]+cnIntLast+cnInteger;
            ChineseStr = cnNums[0] + cnIntLast;
            // document.getElementById('show').value=ChineseStr;
            return ChineseStr;
        }
        money = money.toString(); // 转换为字符串
        if (money.indexOf('.') === -1) {
            IntegerNum = money;
            DecimalNum = '';
        } else {
            parts = money.split('.');
            IntegerNum = parts[0];
            DecimalNum = parts[1].substr(0, 4);
        }
        if (parseInt(IntegerNum, 10) > 0) {
            // 获取整型部分转换
            var zeroCount = 0;
            var IntLen = IntegerNum.length;
            for (var i = 0; i < IntLen; i++) {
                var n = IntegerNum.substr(i, 1);
                var p = IntLen - i - 1;
                var q = p / 4;
                var m = p % 4;
                if (n === '0') {
                    zeroCount++;
                } else {
                    if (zeroCount > 0) {
                        ChineseStr += cnNums[0];
                    }
                    zeroCount = 0; // 归零
                    ChineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                }
                if (m === 0 && zeroCount < 4) {
                    ChineseStr += cnIntUnits[q];
                }
            }
            ChineseStr += cnIntLast;
            // 整型部分处理完毕
        }
        if (DecimalNum !== '') {
            // 小数部分
            var decLen = DecimalNum.length;
            for (var _i = 0; _i < decLen; _i++) {
                var _n = DecimalNum.substr(_i, 1);
                if (_n !== '0') {
                    ChineseStr += cnNums[Number(_n)] + cnDecUnits[_i];
                }
            }
        }
        if (ChineseStr === '') {
            ChineseStr += cnNums[0] + cnIntLast;
        }
        return ChineseStr;
    };
};
exports.default = formatPlugin;