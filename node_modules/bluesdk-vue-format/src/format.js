import dateUtil from 'bluesdk-date-util'

let formatPlugin = {};
formatPlugin.install = function (Vue, options) {

    /**
     * 返回传入参数的最大值，支持传入任意个数
     */
    Vue.prototype.$maxNum = function () {
        let max;
        for (let i = 0; i < arguments.length; i++) {
            if (i === 0) {
                max = arguments[i]
            } else {
                max = max > arguments[i] ? max : arguments[i]
            }
        }
        return max
    }

    Vue.prototype.$round = function (num, decimal) {
        return Number(num).toFixed(decimal);
    }

    /**
     * 数字转千分号
     */
    Vue.prototype.$numToPermillage = function (num, fraction, hideZero) {
        if (fraction === undefined) {
            fraction = 2;
        }
        let s = (num * 1000).toFixed(fraction).toString();
        if (hideZero && s.indexOf('.') > 0) {
            s = s.replace(/0+$/, '').replace(/\.$/, '')
        }
        return s + '‰';
    }

    /**
     * 数字转百分号
     */
    Vue.prototype.$numToPercent = function (num, fraction, hideZero) {
        if (fraction === undefined) {
            fraction = 2;
        }
        let s = (num * 100).toFixed(fraction).toString();
        if (hideZero && s.indexOf('.') > 0) {
            s = s.replace(/0+$/, '').replace(/\.$/, '')
        }
        return s + '%';
    }

    Vue.prototype.$timeToDate = function (timestamp, format) {
        if (!timestamp) {
            return ''
        }
        format = format || 'Y-m-d H:i:s'
        return dateUtil.format(format, timestamp)
    }

    Vue.prototype.$mTimeToDate = function (timestamp, format) {
        if (!timestamp) {
            return ''
        }
        format = format || 'Y-m-d H:i:s'
        return dateUtil.format(format, timestamp / 1000)
    }

    /**
     * 金额数字格式化（输入单元：分,输出单位：元）
     */
    Vue.prototype.$moneyFormat = function (cent) {
        if (cent === undefined) return ''
        let part = (cent / 100).toFixed(2).toString().split('.');
        let ret = part[0].replace(/\d+?(?=(?:\d{3})+$)/g, function (s) {
            return s + ',';
        });
        ret += '.' + part[1];
        return ret;
    }


    /**
     * 银行卡号格式化
     * card: 卡号，bit：分割位数，split：分割符号
     */
    Vue.prototype.$cardNoFormat = function (cardNo, bit, split) {
        bit = bit || 4
        split = split || ' '
        cardNo = String(cardNo)
        let re = RegExp('(\\d{' + bit + '})(?=\\d)', 'g')
        if (/^[A-Za-z0-9]*$/.test(cardNo)) {
            return cardNo.replace(re, '$1' + split)
        } else {
            return cardNo
        }

    }

    /**
     * 数字转中文大写数字
     */
    Vue.prototype.$moneyToChinese = function (money) {
        let cnNums = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'] // 汉字的数字
        let cnIntRadice = ['', '拾', '佰', '仟'] // 基本单位
        let cnIntUnits = ['', '万', '亿', '兆'] // 对应整数部分扩展单位
        let cnDecUnits = ['角', '分', '毫', '厘'] // 对应小数部分单位
        // let cnInteger = '整'; //整数金额时后面跟的字符
        let cnIntLast = '元' // 整型完以后的单位
        let maxNum = 999999999999999.9999 // 最大处理的数字

        let IntegerNum // 金额整数部分
        let DecimalNum // 金额小数部分
        let ChineseStr = '' // 输出的中文金额字符串
        let parts // 分离金额后用的数组，预定义
        if (money === '') {
            return ''
        }
        money = parseFloat(money)
        if (money >= maxNum) {
            return ''
        }
        if (money === 0) {
            // ChineseStr = cnNums[0]+cnIntLast+cnInteger;
            ChineseStr = cnNums[0] + cnIntLast
            // document.getElementById('show').value=ChineseStr;
            return ChineseStr
        }
        money = money.toString() // 转换为字符串
        if (money.indexOf('.') === -1) {
            IntegerNum = money
            DecimalNum = ''
        } else {
            parts = money.split('.')
            IntegerNum = parts[0]
            DecimalNum = parts[1].substr(0, 4)
        }
        if (parseInt(IntegerNum, 10) > 0) {
            // 获取整型部分转换
            let zeroCount = 0
            let IntLen = IntegerNum.length
            for (let i = 0; i < IntLen; i++) {
                let n = IntegerNum.substr(i, 1)
                let p = IntLen - i - 1
                let q = p / 4
                let m = p % 4
                if (n === '0') {
                    zeroCount++
                } else {
                    if (zeroCount > 0) {
                        ChineseStr += cnNums[0]
                    }
                    zeroCount = 0 // 归零
                    ChineseStr += cnNums[parseInt(n)] + cnIntRadice[m]
                }
                if (m === 0 && zeroCount < 4) {
                    ChineseStr += cnIntUnits[q]
                }
            }
            ChineseStr += cnIntLast
            // 整型部分处理完毕
        }
        if (DecimalNum !== '') {
            // 小数部分
            let decLen = DecimalNum.length
            for (let i = 0; i < decLen; i++) {
                let n = DecimalNum.substr(i, 1)
                if (n !== '0') {
                    ChineseStr += cnNums[Number(n)] + cnDecUnits[i]
                }
            }
        }
        if (ChineseStr === '') {
            ChineseStr += cnNums[0] + cnIntLast
        }
        return ChineseStr
    }
}
export default formatPlugin;
