"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var utilPlugin = {};
utilPlugin.install = function (Vue, options) {
    Vue.utilPluginInstalled = true;

    /**
     * 复制对象
     * @param object 原对象
     * @param excludes 排除属性
     * @returns {{}}
     */
    Vue.prototype.$copyObject = function (object, excludes) {
        excludes = excludes || [];
        var o = {};
        for (var i in object) {
            if (this.$inArr(i, excludes)) {
                continue;
            }
            o[i] = object[i];
        }
        return o;
    };

    Vue.prototype.$isEmptyObject = function (object) {
        var empty = true;
        for (var i in object) {
            empty = false;
            break;
        }
        return empty;
    };

    /**
     * 比较两个对象是否相等,excludes[]为排除的属性
     */
    Vue.prototype.$objectMatch = function (obj1, obj2, excludes) {
        for (var i in obj1) {
            if (this.$inArr(i, excludes)) continue;
            if (obj1[i] !== obj2[i]) {
                return false;
            }
        }
        for (var _i in obj2) {
            if (this.$inArr(_i, excludes)) continue;
            if (obj1[_i] !== obj2[_i]) {
                return false;
            }
        }
        return true;
    };

    Vue.prototype.$getObjVal = function (obj, key, defaultValue) {
        if (!obj || !obj.hasOwnProperty(key)) {
            return defaultValue;
        }
        return obj[key];
    };

    /**
     * 数组中是否包含某个值
     */
    Vue.prototype.$inArr = function (val, arr) {
        arr = arr || [];
        var len = arr.length;
        if (!len) return false;
        for (var i = 0; i < len; i++) {
            if (val === arr[i]) {
                return true;
            }
        }
        return false;
    };

    Vue.prototype.$arrToMap = function (arr, key, key2) {
        var map = {};
        for (var i = 0, len = arr.length; i < len; i++) {
            if (arr[i][key]) {
                map[arr[i][key]] = key2 ? arr[i][key2] : arr[i];
            }
        }
        return map;
    };

    Vue.prototype.$mapToArr = function (map, labels, converters) {
        var arr = [];
        if (typeof converters === 'undefined') {
            converters = {};
        }
        for (var field in labels) {
            var value = map[field];
            if (converters[field] !== undefined) {
                value = converters[field](value);
            }
            arr.push({ label: labels[field], value: value, field: field });
        }
        return arr;
    };

    Vue.prototype.$long2ip = function (ip) {
        return (ip >> 24 & 0xFF) + "." + (ip >> 16 & 0xFF) + "." + (ip >> 8 & 0xFF) + "." + (ip & 0xFF);
    };
};
exports.default = utilPlugin;