import _typeof from 'babel-runtime/helpers/typeof';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _get from 'babel-runtime/helpers/get';
import BaseEnum from 'bluesdk-base-enum';

var MathRoundTypeEnum = function (_BaseEnum) {
    _inherits(MathRoundTypeEnum, _BaseEnum);

    function MathRoundTypeEnum() {
        _classCallCheck(this, MathRoundTypeEnum);

        var _this = _possibleConstructorReturn(this, (MathRoundTypeEnum.__proto__ || _Object$getPrototypeOf(MathRoundTypeEnum)).call(this));

        _this.ROUND_UP = _get(MathRoundTypeEnum.prototype.__proto__ || _Object$getPrototypeOf(MathRoundTypeEnum.prototype), 'put', _this).call(_this, 0, '直接进一');
        _this.ROUND_DOWN = _get(MathRoundTypeEnum.prototype.__proto__ || _Object$getPrototypeOf(MathRoundTypeEnum.prototype), 'put', _this).call(_this, 1, '直接舍弃');
        _this.ROUND_HALF_UP = _get(MathRoundTypeEnum.prototype.__proto__ || _Object$getPrototypeOf(MathRoundTypeEnum.prototype), 'put', _this).call(_this, 4, '向上四舍五入');
        _this.ROUND_HALF_DOWN = _get(MathRoundTypeEnum.prototype.__proto__ || _Object$getPrototypeOf(MathRoundTypeEnum.prototype), 'put', _this).call(_this, 5, '向下四舍五入');
        return _this;
    }

    _createClass(MathRoundTypeEnum, [{
        key: 'setScale',
        value: function setScale(num, scale, mode) {
            var str = String(num).split('.');
            if (str.length === 1 || str[1].length <= scale) {
                return Number(num).toFixed(scale);
            }
            if ((typeof mode === 'undefined' ? 'undefined' : _typeof(mode)) === 'object' && mode['value'] !== undefined) {
                mode = mode['value'];
            }
            var pow = Math.pow(10, scale);
            num = Number(num) * pow;
            if (mode === this.ROUND_UP.value) {
                num = Math.ceil(num);
            } else if (mode === this.ROUND_DOWN.value) {
                num = Math.floor(num);
            } else if (mode === this.ROUND_HALF_UP.value) {
                num = Math.round(num);
            } else {
                var _str = String(num).split('.');
                if (_str.length === 2 && _str[1] > 5) {
                    num = Math.ceil(num);
                } else {
                    num = Math.floor(num);
                }
            }

            return Number(num / pow).toFixed(scale);
        }
    }]);

    return MathRoundTypeEnum;
}(BaseEnum);

var o = new MathRoundTypeEnum();
export default o;